
Machine Learning Notes:
----------------------
----------------------

Tutorial used here:
https://www.youtube.com/watch?v=gmvvaobm7eQ&list=PLeo1K3hjS3uvCeTYTeyfe0-rN5r8zn9rw


Tutorial 1 : Machine Learning Tutorial Python : What is Machine Learning?
--------------------------

We need to think from how the baby learn.
We are showing a cow to the baby and we say this is cow.
Then we are showing few more cows to the baby and we saw this is a cow
We will continue this.
Next time when baby see any cow, then can say it is cow.
Say to other things or products.

So here we are training the baby with different inputs of the same products multiple times for learning.
Then it learn and able to recognise.
Same will be doing in machine learning.
This process is deep learning. Deep learning is also a part of machine learning

We will using some mathametical concepts for achiving many things in machine learning.

Below are few examples of machines learning which are already there
1. Google gmail spam folder. Google automatically identify the spam folder and keep it in spam folder instead of inbox. Because it knows about spam folder which was alredy there is their system for long
2. Youtube recommendation videos
3. Even driverless cars or self driving cars


--------------------



Tutorial 2: Machine Learning Tutorial Python - 2: Linear Regression Single Variable
------------------------------------------------------------------------------------
This is the tutorial where we can learn how to predict the values when we have list of two pair values.
Here we have used the example of area in square feets and its price in a city
When we have few in the list, we can able to predict the value for any square fleet.

When one value is depend on one variable, below is the formula
y = mx + b
Here we give many sample input with list of two values. Based on this formula, it will predict for the given one


x is the coefficient(independent variable or feature)
b is the intercept
y is the is the dependent variable (which is target value)

Check the examples for more details

-------------------------


Tutorial 3: Machine Learning Tutorial Python - 3: Linear Regression Multiple Variables
---------------------------
Here for finding one value, it might be depend on multiple values.
Eg: calculating home price is depend on squarefeet, number of bedrooms, age of home etc
So when one taget value depend on multiple variable, we can go with below formula

y = m1x1 + m2x2 + m3x3 + b

Below is the formula for above example

price = m1 * area + m2 * bedrooms + m3 * age + b

Here area, bedrooms and age are independent variables
m1, m2 and m3 are coefficient
b is intercept
price is dependent variables

Independent variables are also called as features

We can have n number of independent variables and coefficient combinations

Below is to find the mean value 
df.ColumnName.mean()
or
df['columnName'].mean()    

Eg:
df['test_score(out of 10)'].mean()


math.floor(giveValue)    # this will give the roundedv value

Eg:
import math
mean_value = math.floor(df['test_score(out of 10)'].mean())

Below is to replace the null value with specific vaue (Mostly with 0 or mean value)
df.columnName = df.columnName.fillna(mean_value)
or
df['columnName'] = df['columnName'].fillna(mean_value)

Eg"
df['score'] = df['score'].fillname(0)    # to fill the empty value with 0
or
df['score'] = df['score'].fillname(mean_value)    # to fill the empty value with mean value


reg = linear_model.LinearRegression()
ref.fit(df[[area, bedroom, age]], price)    //Here we are adding the input to train,

ref.coef_        #To give coefficient
ref.intercept_   # To give intercept value

ref.predict([[4000, 3, 5]])   - This will print the predicted value as per input given. We should give same number of parameters and its values

----------------------------------

Tutorial 4: Machine Learning Tutorial Python - 4: Gradient Descent and Cost Function
----------------------------------------------------------------------------
We won't we directly using the gradient descent in machine learning.
But if we know this we can understand and we can use the sklearn library in effectively

If school, we will have the equation, based on the equation we can find the values

In ML, we will have the input and out. Based on input and output, we find the equation
Eg: In tutorial 2, we have input and output. (squarefleet and price)
Based on values of input and output list, we can able to find the output if some newput was given

IF we plot the square fleet and price, then we can able to draw the line which can be best fit

This line will be the equation

Goal of this tutorial is find the equation

To find this, lets draw a best fit line.
Lets take a gap of each data point and the line
Collect these data and square them
And then devide them by number of data point
These result is called mean square error.
Mean squalre is also called cost function
Mean spare file

actual data point - predicted data point.Square this.

Gradle descent is technique to find the equltion/formula in efficent way and with less iteration.


To find we will take a 3D graph which has m in one side and b in other side. and we can find mse(mean square error) which will be in height section

We wil start with the 0 as the m and b value to find the mse, then we will give other values of m and b, and we notice mse will fall little down slop.
We can repeat the same multiple times ( We need to take small baby step/slop) and finally we can notice the mse will have the same point with very less different which is global minimum.
That is the answer, that we can use as the m and b in prediction.

We can take multiple m as m1, m2, m3 which might fall on multiple lines. but we need to find the correct mean line
We need to reduce the m and b to find the best fit line. 

We need to also look the graph from b and mse and also form m and mse

If I take fixed difference/step/slop there are chances I might miss the minimum
How I can do that.
I can minimise the step/slop/difference in each time smaller and smaller in each time, that can help to reach the minimum.
We need to also find the slop and the direction also in each and compare where to go

If need we can also use "Essence of calculus" from 3Blue1Brown youtube channel to learn maths things related to this - This is good in explaining in detail


Derivatives is all about slope

To find slope between two points use below formula
slope = change in y / change in x

What if we want to slope in particular point
To calculate we can use below formula
slope = small change in y / small change in x

Here x shrink to 0 and y shrink to 0. Thats where we we will most acurate slope
For equalation link X square (X^2), the slope will be 2X    //IMP: Here we have used ^ where we want to add square or cube above

This is the derivatives
Equation of derivatives is d/dx X2 = 2X

So when X is 2, slope will be 4
When X is 5, slope will be 10


Lets see what is partial derivatives:

Below is the formula for finding partial derivatives

f(x,y)  = X^2 + Y^3      //X square + Y cube .

We can keep other value as 0 and we can find x
f(x,y) = X^2 + 0 = 2X

We can keep oter value s 0 and we can find y
f(x,y) = 0 + Y^3 = 3Y^2



Derivatives of x
f(x) = x^3
d/dx x^3 = 3x^2



f(x,y) = x^3 + y^2

@f/@x = 3x^2 + 0 = 3x^2

@f/@y = 0 + 2y = 2y


In our case, we need to find the partial derivatives of b and paritial derivatives of m // Below are the equations

mse = 1/2 nEi=0 (yi - (mxi + b))^2

@/@m = 2/n nEi=0 -xi (yi - (mxi + b))

@/@b = 2/n nEi=0 -(yi - (mxi + b))


Once we have partial derivatives, we will be having slope which is the direction.
Once we have direction, we have to move a step
For step use below formula
m = m - learning rate * @/@m
b = b - learning rate * @/@b


We will be having b1 value which is the starting point of he slope, then we have next point as b2
b2 = b1 - learning rate * @/@b

We need to reduce the cost as much we can. 
When we get the same cost, that is the answer

Initially we can give less iteration and with higher learning rate difference. Then reduce the learning rate with more decimals
Our goal is to reduce the cost as much. It should not increase.
We should start learning rate with first 0.1. 0.09, 0.08 etc. We need to find the minimum and stick to that learning rate
Once we stick to the learning rate, then increase the iteration count from 10 to 100, or 1000 or 10000
Once we reached the cost will remain nearly same



We can also use math.isClose function to compare whether both values(current and previous cost value) are nearly same or not.
We can give it in if condition and we can break the iterations when close values
Eg:        
if math.isclose(current_cost, previous_cost, rel_tol=1e-20):
   break
For more details about the math.isClose refer below
https://www.w3schools.com/python/ref_math_isclose.asp


------------------------

Tutorial 5: Machine Learning Tutorial Python - 5: Save Model Using Joblib And Pickle
--------------------------------------------------------------------------------------
In this tutorial we can see how we can save the model and we can load the model
There are two ways to save and load the model
1. pickle
2. sklearn joblib or joblib

We can save the trained model


1.pickle: 
//Below are the steps to save the model

import pickle
with open('new_file_name', 'wb') as f:                 //wb means write byte
    pickle.dump(givenModel, f)

Eg:

with open('my_model', 'wb') as f:
    pickle.dump(reg, f)



//Below are the steps to load the saved model

import pickle
with open('file_name', 'rb') as f:                 //rb means read byte
    giveobjName = pickle.load(f)

Eg:
import pickle
with open('my_model', 'rb') as f:  
    ref = pickle.load(f)




2.  sklearn joblib or joblib   //joblib is the latest

//Below are the steps to save the model

from sklearn.external import joblib

joblib.dump(giveModelHere, 'giveFileNameHere')                     # This is to save the model
Eg:
joblib.dump(reg, 'myModel')


//Below are the steps to load the model

from sklearn.external import joblib  //Old
from joblib       //newone

modelObj = joblib.load(giveFileNameHere)                     # This is to load the model
Eg:
model = joblib.load('myModel')


Model will be saved in binary format.
When our model has large numpy array it is suggested to use joblib.
In other cases we can use pickle.
But mosly both works in same way


---------------------

Tutorial 6: Machine Learning Tutorial Python - 6: Dummy Variables & One Hot Encoding
------------------------------------------------------------------------------------
In this tutorial we will cover categorial, dummat variables and one hot encoding
Lets say we have few string values in the table 
Eg: the price of the house price is based on square feet as well as the city. Here city will be in string.
Machines are good in numberic values
We can use each city as each number. Eg: 1, 2, 3.
Machine will also thing this as increasing order or 1+2 =3. This might confuse the machines.

There are two types of categorial variables
1. Nominal - These are not numberic values. Eg: male, felmale, Eg: different colors like white, green, Eg: different cities like delhi, chennai etc
2. Ordinal - These are related to numberic values. Eg: Customer rating 1, 2, 3 Eg: high, medium, low. For these types we can still use number.

Method 1:
For in this case, it is nominal. So we cannot use number value.
To solve this use technique called one hot encoding where we can have different column for each values and have filled with 1 and 0.
Eg:
We can take delhi as one column and we can have 1 value for row for which matches with delhi. For other we can give 0
We can take chennai as one more column. We can give 1 value for row which matches with chennai. For other we can give 0



We have to create multiple columns for each rows with value True/false or 1/0.
For creating multiple columns for each string rows use below
dummies = pd.get_dummies(df.columnName)  # This will just create multiple rows for each string columns
dummies = pd.get_dummies(df.town) # For each town, it will create coumns

Then join both actual and dummies, use below
mergedtable = pd.concat([df, dummies], axis='columns')   # We have to join the columns


Then we have to drop the actual column which has multiple string value.
Then we have to drop one of the newly created column. because that can be derived from the other columns if we make it as false or 0

Below is to drop
finalTable = mergedtable.drop(['town', 'west windsor'], axis='columns') # Here we are dropping town as we have already created column for each value. Also we are dropping west windsor because with previous two column(with value false) it can be derived

Then we can have indepedent variables in one table x
x = finalTable.drop(['price'], axis='columns')

And dependent variable in other table y
y = finalTable.price

We can pass both into the fit method the linear regression for training
Eg:
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x,y)

If we want to get the accuracy rate, we can use score method.
model.score(x,y)   . Here 0.95 means 95% and 1 means 100%

Then for prediction we can use the same along with newly created column value
model.predict([['columnValue1', 'columnValue2', 'columnValue3']])


model.predict([[5000, True, False]])   # This is to find in monroe township
model.predict([[5000, False, True]])  # This is to find in robinsville
model.predict([[5000, False, False]]) # This is to find in west windsor   //We have not created column for west windsor. But by giving false false, we can get the value


Refer jupyter notebook for details

Method 2:
Below is with one hot encoder


df2 = df    # for second method we just using df2
df2

We can use label encoder to give number for each of the string value
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df2.town = le.fit_transform(df['town'])    # This will give number for each value pf town

Then we can assign independent variables to X in array format
X = df2[['town', 'area']].values          #pass the values in array

Then assign dependent price variables to y in array format
y = df2.price.values

Now use one hot encoder to create dummy variables for each of the town    
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer           
ct = ColumnTransformer([('town', OneHotEncoder(), [0])], remainder='passthrough') 

 # IMPORTANT : WE CAN SEE FEW DIFFERENCE IN VIDEO AND THIS CODE, BECAUSE THE VIDEO ONE WAS DEPRECATED       NOW              

Assign X with each created town values of arra to the area. We can find in 2D array
X = ct.fit_transform(X) 

Now drop one of the column. Because one column can be derived from other values
X = X[:,1:]              # Dropping first column (monroe township)

Now train and predict

from sklearn.linear_model import LinearRegression
model2 = LinearRegression()

model2.fit(X,y)    # Training

model2.predict([[0,0,5000]])  # This is to find in monroe township
model2.predict([[1,0,5000]])  # This is to find in robinsville
model2.predict([[0,1,5000]]) # This is to find in west windsor

model2.score(X,y)  # this is to see the accuracy score


We can use any of the two methods

---------------------

Machine Learning Tutorial Python - 7: Training and Testing Data
----------------------------------------------------------------







----------------------------

Notes:
-----

Model: Model is the application of machine learning.
Model is the tool which we have trained and ready for use.










--------------------------

