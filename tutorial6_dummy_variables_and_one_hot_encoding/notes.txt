Tutorial 6: Machine Learning Tutorial Python - 6: Dummy Variables & One Hot Encoding
------------------------------------------------------------------------------------
In this tutorial we will cover categorial, dummat variables and one hot encoding
Lets say we have few string values in the table 
Eg: the price of the house price is based on square feet as well as the city. Here city will be in string.
Machines are good in numberic values
We can use each city as each number. Eg: 1, 2, 3.
Machine will also thing this as increasing order or 1+2 =3. This might confuse the machines.

There are two types of categorial variables
1. Nominal - These are not numberic values. Eg: male, felmale, Eg: different colors like white, green, Eg: different cities like delhi, chennai etc
2. Ordinal - These are related to numberic values. Eg: Customer rating 1, 2, 3 Eg: high, medium, low. For these types we can still use number.

Method 1:
For in this case, it is nominal. So we cannot use number value.
To solve this use technique called one hot encoding where we can have different column for each values and have filled with 1 and 0.
Eg:
We can take delhi as one column and we can have 1 value for row for which matches with delhi. For other we can give 0
We can take chennai as one more column. We can give 1 value for row which matches with chennai. For other we can give 0



We have to create multiple columns for each rows with value True/false or 1/0.
For creating multiple columns for each string rows use below
dummies = pd.get_dummies(df.columnName)  # This will just create multiple rows for each string columns
dummies = pd.get_dummies(df.town) # For each town, it will create coumns

Then join both actual and dummies, use below
mergedtable = pd.concat([df, dummies], axis='columns')   # We have to join the columns


Then we have to drop the actual column which has multiple string value.
Then we have to drop one of the newly created column. because that can be derived from the other columns if we make it as false or 0

Below is to drop
finalTable = mergedtable.drop(['town', 'west windsor'], axis='columns') # Here we are dropping town as we have already created column for each value. Also we are dropping west windsor because with previous two column(with value false) it can be derived

Then we can have indepedent variables in one table x
x = finalTable.drop(['price'], axis='columns')

And dependent variable in other table y
y = finalTable.price

We can pass both into the fit method the linear regression for training
Eg:
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x,y)

If we want to get the accuracy rate, we can use score method.
model.score(x,y)   . Here 0.95 means 95% and 1 means 100%

Then for prediction we can use the same along with newly created column value
model.predict([['columnValue1', 'columnValue2', 'columnValue3']])


model.predict([[5000, True, False]])   # This is to find in monroe township
model.predict([[5000, False, True]])  # This is to find in robinsville
model.predict([[5000, False, False]]) # This is to find in west windsor   //We have not created column for west windsor. But by giving false false, we can get the value


Refer jupyter notebook for details

Method 2:
Below is with one hot encoder


df2 = df    # for second method we just using df2
df2

We can use label encoder to give number for each of the string value
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df2.town = le.fit_transform(df['town'])    # This will give number for each value pf town

Then we can assign independent variables to X in array format
X = df2[['town', 'area']].values          #pass the values in array

Then assign dependent price variables to y in array format
y = df2.price.values

Now use one hot encoder to create dummy variables for each of the town    
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer           
ct = ColumnTransformer([('town', OneHotEncoder(), [0])], remainder='passthrough') 

 # IMPORTANT : WE CAN SEE FEW DIFFERENCE IN VIDEO AND THIS CODE, BECAUSE THE VIDEO ONE WAS DEPRECATED       NOW              

Assign X with each created town values of arra to the area. We can find in 2D array
X = ct.fit_transform(X) 

Now drop one of the column. Because one column can be derived from other values
X = X[:,1:]              # Dropping first column (monroe township)

Now train and predict

from sklearn.linear_model import LinearRegression
model2 = LinearRegression()

model2.fit(X,y)    # Training

model2.predict([[0,0,5000]])  # This is to find in monroe township
model2.predict([[1,0,5000]])  # This is to find in robinsville
model2.predict([[0,1,5000]]) # This is to find in west windsor

model2.score(X,y)  # this is to see the accuracy score


We can use any of the two methods
