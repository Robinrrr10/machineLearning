Machine Learning Tutorial Python - 19: Principal Component Analysis (PCA) with Python Code
------------------------------------------------------------------------------------------
Principal Component Analysis the technique used to reduce the features(columns)
This might help to improve the performance.
PCA is analyse what are all the important feature in the input data set which will impact the target variable and it will eliminate the others.
This helps in training faster and improve the performance.
This also helps in data visualization
PCA is the technique to reduce the diamension (features)

If we draw the plots, we can see some feature may not have much impact or it will impact very less on target variables.
PCA will help to eliminate those and will focus more on features which impact more on the target variables

If we tage handwritten digits, we can see cornor plots not make much impact on target variables.

There are 2 important things,
1. We need to scale the features before applying PCA
2. Accuracy might drop

To scale we use StandardScalar 

from sklearn.preprocessing import StandardScalar
scalar = StandardScalar()
X_scaled = scalar.fit_transform(X)
//Above will assign the value from -1 to 1 for each of the X

Better before PCA we can create a scaled values like above. But still we can directly use if requireqd

from sklearn.decomposition import PCA
pca = PCA(0.95)     //Here we are passing 95%. Based on atleast 95% of accuracy, it will eliminate other features and it will give features which are more important to make atleast 95%.
X_pca = pca.fit_transform(X_scaled)
Now we can use this X_pca dataset as the input.
This will contain only the major features which are required to make atleast 95%.

pca.explained_variance_ratio_
//This will show the ratio(%) of the columns which can impact 

pca.n_components_
//This will show number of components

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_pca, y_train)
model.score(X_test, y_test)
Now the score will be nearly same or atleast more than 95%.


from sklearn.decomposition import PCA
pca2 = PCA(0.95) 
X_pca2 = pca2.fit_transform(X)   //We can directly pass X as well. Still it will work. So scalling is not mandatory. It will still work

We can pass number of columns instead of giving %. But the accuracy might drop if number of columns are less. Below is the example
from sklearn.decomposition import PCA
pca2 = PCA(n_components=3)               //Here we have given only 3 columns as the feature. 
X_pca2 = pca2.fit_transform(X)



For more details refer jupyter notebook of this tutorial


----------------------------
